class LayoutOptimizer:
  def __init__(
    self,
    nodes: list[list[str]],
    edges: list[list[tuple[str, str, int]]],
  ): ...
  def swap_nodes(self, temperature: float, max_iterations: int, layer_index: int) -> int: ...
  def cooldown(self, start_temp: float, end_temp: float, steps: int, max_iterations: int, layer_index: int) -> int: ...
  def optimize(self, start_temp: float, end_temp: float, steps: int, max_iterations: int, passes) -> int: ...
  def get_nodes(self) -> tuple[list[str], list[str]]: ...
  def count_crossings(self) -> int: ...

class HierarchyOptimizer:
  def __init__(
    self,
    nodes: list[list[str]],
    edges: list[list[tuple[str, str, int]]],
    hierarchy: list[list[list[int]]],
  ): ...
  def swap_nodes(self, temperature: float, max_iterations: int, layer_index: int, granularity: int | None) -> int: ...
  def cooldown(
    self, start_temp: float, end_temp: float, steps: int, max_iterations: int, layer_index: int, granularity: int | None
  ) -> int: ...
  def optimize(self, start_temp: float, end_temp: float, steps: int, max_iterations: int, passes) -> int: ...
  def get_nodes(self) -> tuple[list[str], list[str]]: ...
  def count_crossings(self) -> int: ...
